<wddxPacket version='1.0'><header/><data><array length='23'><struct><var name='name'><string>dateNotValid</string></var><var name='code'><string><char code='0A'/>// blank is OK<char code='0A'/>    if (!trim(strlen($value))) {<char code='0A'/><char code='09'/>return true;<char code='0A'/>  } <char code='0A'/><char code='0A'/> $ret = validate::date($value,array(<char code='0A'/>                'format'          =&gt;'%d/%m/%Y',<char code='0A'/>               'min'             =&gt;array(21,1,1900),<char code='0A'/>                'max'             =&gt;array(21,1,2050)<char code='0A'/>            ));<char code='0A'/><char code='0A'/></string></var><var name='error'><string>Date format should be dd/mm/yyyy</string></var></struct><struct><var name='name'><string>notInFuture</string></var><var name='code'><string>      <char code='0A'/>// blank is OK<char code='0A'/>    if (!trim(strlen($value))) {<char code='0A'/><char code='09'/>return true;<char code='0A'/>  } <char code='0A'/>  $ret = validate::date($value,array(<char code='0A'/>                'format'          =&gt;'%d/%m/%Y',<char code='0A'/>                'min'             =&gt;array(date('d'),date('m'),date('Y'))<char code='0A'/>            ));<char code='0A'/></string></var><var name='error'><string>the date must be in the future</string></var></struct><struct><var name='name'><string>isEmpty</string></var><var name='code'><string>if (!strlen(trim($value))) {<char code='0A'/>  return false;<char code='0A'/>}<char code='0A'/>return true;</string></var><var name='error'><string>you must fill in a value</string></var></struct><struct><var name='name'><string>hkidLength</string></var><var name='code'><string>        $ret = validate::string($value,array(<char code='0A'/>                'format'          =&gt;'A-Za-z0-9() ',<char code='0A'/>                'min_length'      =&gt;6,<char code='0A'/>                'max_length'      =&gt;9<char code='0A'/>            ));<char code='0A'/></string></var><var name='error'><string>test validation</string></var></struct><struct><var name='name'><string>memberFindRule</string></var><var name='code'><string>if (!strlen(trim($value))) {<char code='0A'/><char code='09'/>return true;<char code='0A'/>}<char code='0A'/><char code='0A'/>if (preg_match('/[A-Z]-[0-9]{0,3}/i',$value)) {<char code='0A'/><char code='09'/>return true;<char code='0A'/>}<char code='0A'/>return false;</string></var><var name='error'><string>you need to use the format A-000 or Z- in this box</string></var></struct><struct><var name='name'><string>dateNotValidWhenNotEmpty</string></var><var name='code'><string>if (!$this-&gt;empty($value)) {<char code='0A'/>   return true;<char code='0A'/>}<char code='0A'/>return $this-&gt;dateNotValid($value);</string></var><var name='error'><string>please fill in the date in the format dd/mm/yyyy</string></var></struct><struct><var name='name'><string>printedCopies</string></var><var name='code'><string>        $ret = validate::number($value,array(<char code='0A'/>                'min'      =&gt;1,<char code='0A'/>                'max'      =&gt;5<char code='0A'/>            ));<char code='0A'/></string></var><var name='error'><string>you can only print a maximum of 5 copies</string></var></struct><struct><var name='name'><string>MonthYearNotValid</string></var><var name='code'><string> $ret = validate::date($value,array(<char code='0A'/>                'format'          =&gt;'%m/%Y',<char code='0A'/>             <char code='0A'/>            ));</string></var><var name='error'><string>you should enter the date as mm/yyyy</string></var></struct><struct><var name='name'><string>feeInvalid</string></var><var name='code'><string>        $ret = validate::number($value,array(<char code='0A'/>                'decimal'  =&gt;'.',<char code='0A'/>                'dec_prec' =&gt;2,<char code='0A'/>                'min'      =&gt;0,<char code='0A'/>                'max'      =&gt;100000<char code='0A'/>            ));<char code='0A'/></string></var><var name='error'><string>the fee is not valid, use 0.00 or 1000.00</string></var></struct><struct><var name='name'><string>noValidActiveMember</string></var><var name='code'><string>require_once 'DataObjects/Members.php';<char code='0A'/>$lookup = DataObjects_Members::staticGet($value);<char code='0A'/>if (!$lookup) {<char code='0A'/><char code='09'/>return false;<char code='0A'/>}<char code='0A'/>return true;</string></var><var name='error'><string>You must select a valid member</string></var></struct><struct><var name='name'><string>notInFutureMonth</string></var><var name='code'><string>        $ret = validate::date($value,array(<char code='0A'/>                'format'          =&gt;'%m/%Y',<char code='0A'/>                'min'             =&gt;array(date('d'),date('m'),date('Y'))<char code='0A'/>            ));<char code='0A'/></string></var><var name='error'><string>Date Must be in the future</string></var></struct><struct><var name='name'><string>notInPast</string></var><var name='code'><string>// blank is OK<char code='0A'/>    if (!trim(strlen($value))) {<char code='0A'/><char code='09'/>return true;<char code='0A'/>  } <char code='0A'/>       $ret = validate::date($value,array(<char code='0A'/>                'format'          =&gt;'%d/%m/%Y',<char code='0A'/>                'max'             =&gt;array(date('d'),date('m'),date('Y'))<char code='0A'/>            ));<char code='0A'/></string></var><var name='error'><string>You must enter a date today or in the past</string></var></struct><struct><var name='name'><string>photoNotJpeg</string></var><var name='code'><string>  if (isset($_FILES['photo']) &amp;&amp; $_FILES['photo']['type'] &amp;&amp;  $_FILES['photo']['type'] != 'image/jpeg') {<char code='0A'/>        return false;<char code='0A'/>        }<char code='0A'/>return true;</string></var><var name='error'><string>Sorry can only accept jpeg image</string></var></struct><struct><var name='name'><string>moreTwoChars</string></var><var name='code'><string>if ($value &amp;&amp; (strlen($value) &gt; 2)) {<char code='0A'/>  return false;<char code='0A'/>}<char code='0A'/>return true;</string></var><var name='error'><string>This is longer than the Maximum of 2 characters</string></var></struct><struct><var name='name'><string>notValidMemberCode</string></var><var name='code'><string>require_once 'DataObjects/Members.php';<char code='0A'/>$lookup = DataObjects_Members::staticGet('code',$value);<char code='0A'/>if (!$lookup) {<char code='0A'/><char code='09'/>return false;<char code='0A'/>}<char code='0A'/>return true;</string></var><var name='error'><string>That was not a valid member</string></var></struct><struct><var name='name'><string>notValidTransactionCode</string></var><var name='code'><string>require_once 'DataObjects/Account_code.php';<char code='0A'/>$lookup = DataObjects_Account_code::staticGet('name',$value);<char code='0A'/>if (!$lookup) {<char code='0A'/><char code='09'/>return false;<char code='0A'/>}<char code='0A'/>return true;</string></var><var name='error'><string>Not a valid Code</string></var></struct><struct><var name='name'><string>transactionValueInvalid</string></var><var name='code'><string>        $ret = validate::number($value,array(<char code='0A'/>                'decimal'  =&gt;'.',<char code='0A'/>                'dec_prec' =&gt;2,<char code='0A'/>                'min'      =&gt; -100000,<char code='0A'/>                'max'      =&gt;100000<char code='0A'/>            ));<char code='0A'/></string></var><var name='error'><string>The value is not valid</string></var></struct><struct><var name='name'><string>invalidMemberCodeFormat</string></var><var name='code'><string>if (preg_match('/[A-Z]\-[0-9]{3}/',$value)) {<char code='0A'/><char code='09'/>return true;<char code='0A'/>}<char code='0A'/>return false;</string></var><var name='error'><string>Member Code format is not valid</string></var></struct><struct><var name='name'><string>memberExistsAlready</string></var><var name='code'><string>require_once 'DataObjects/Members.php';<char code='0A'/>$lookup = DataObjects_Members::staticGet('code',$value);<char code='0A'/>if (!$lookup) {<char code='0A'/><char code='09'/>return true;<char code='0A'/>}<char code='0A'/>return false;</string></var><var name='error'><string>this member code is already used.</string></var></struct><struct><var name='name'><string>invalidCountry</string></var><var name='code'><string><char code='09'/>require_once 'I18N/Country.php';<char code='0A'/>        $i18n = new I18N_Country;<char code='0A'/>        $codes = $i18n-&gt;getAllCodes();<char code='0A'/><char code='09'/>if (isset($codes[$value])) {<char code='0A'/><char code='09'/>   return true;<char code='0A'/>      }<char code='0A'/>return false;</string></var><var name='error'><string>Not a valid country code</string></var></struct><struct><var name='name'><string>notValidBoat</string></var><var name='code'><string>require_once 'DataObjects/Boats.php';<char code='0A'/>$lookup = DataObjects_Boats::staticGet($value);<char code='0A'/>if (!$lookup) {<char code='0A'/><char code='09'/>return false;<char code='0A'/>}<char code='0A'/>return true;</string></var><var name='error'><string>You Must select a valid Boat</string></var></struct><struct><var name='name'><string>notInPastOrNearFuture</string></var><var name='code'><string>// blank is OK<char code='0A'/>    if (!trim(strlen($value))) {<char code='0A'/><char code='09'/>return true;<char code='0A'/>  } <char code='0A'/>     require_once 'DB/DataObject/Cast.php';<char code='0A'/>     $d = DB_DataObject_Cast::date(date('Y'),date('m')+6,date('d'));<char code='0A'/>   //print_r($d);<char code='0A'/>       $ret = validate::date($value,array(<char code='0A'/>                'format'          =&gt;'%d/%m/%Y',<char code='0A'/>                'max'             =&gt;array($d-&gt;day,$d-&gt;month,$d-&gt;year)<char code='0A'/>            ));<char code='0A'/></string></var><var name='error'><string>Date is Not in past or within 6 months of today</string></var></struct><struct><var name='name'><string>optionalMoneyInvalid</string></var><var name='code'><string><char code='0A'/>if (!strlen(trim($value))) {<char code='0A'/>   return true; // empty ok<char code='0A'/>}<char code='0A'/>    $ret = validate::number($value,array(<char code='0A'/>                'decimal'  =&gt;'.',<char code='0A'/>                'dec_prec' =&gt;2,<char code='0A'/>                'min'      =&gt;0,<char code='0A'/>                'max'      =&gt;100000<char code='0A'/>            ));<char code='0A'/></string></var><var name='error'><string>this is not a valid value</string></var></struct></array></data></wddxPacket>